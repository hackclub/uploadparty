# Cloud Run optimized backend-only build
FROM golang:1.23-alpine AS builder

RUN apk update && apk add --no-cache \
    ca-certificates \
    git \
    tzdata \
    && rm -rf /var/cache/apk/*

RUN adduser -D -g '' appuser

WORKDIR /app

# Copy go mod/sum and download deps
COPY backend/go.mod backend/go.sum ./
RUN go mod download && go mod verify

# Copy backend source code and build
COPY backend/ .
RUN go mod tidy && go mod download && go mod verify
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o main cmd/server/main.go

# Final runtime image
FROM alpine:latest

RUN apk update && apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    && rm -rf /var/cache/apk/* \
    && update-ca-certificates

RUN adduser -D -g '' appuser

WORKDIR /app

# Copy backend binary
COPY --from=builder /app/main /app/main

# Make binary executable
RUN chmod +x /app/main

RUN chown -R appuser:appuser /app
USER appuser

# Cloud Run automatically sets PORT, but default to 8080
ENV PORT=8080
ENV GIN_MODE=release

# Expose the port (Cloud Run will use the PORT env var)
EXPOSE $PORT

# Healthcheck for backend (disable for Cloud Run - it has its own)
# HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
#     CMD curl -f http://localhost:$PORT/health || exit 1

# Start backend process with explicit logging
CMD ["sh", "-c", "echo 'Starting server on port $PORT' && ./main"]