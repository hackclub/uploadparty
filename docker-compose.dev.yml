include:
  - docker-compose.yml

services:
  # Local Postgres for development
  postgres-local:
    image: postgres:16-alpine
    container_name: uploadparty-postgres-local
    environment:
      POSTGRES_USER: ${DB_USER:-uploadparty}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_local_db_password}
      POSTGRES_DB: ${DB_NAME:-uploadparty_db}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - uploadparty-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-uploadparty} -d ${DB_NAME:-uploadparty_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API (development)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: uploadparty-api
    environment:
      # Database (local Postgres)
      DB_HOST: postgres-local
      DB_PORT: 5432
      DB_USER: ${DB_USER:-uploadparty}
      DB_PASSWORD: ${DB_PASSWORD:-your_local_db_password}
      DB_NAME: ${DB_NAME:-uploadparty_db}
      DB_SSL_MODE: disable

      # JWT
      JWT_SECRET: ${JWT_SECRET:-change_me}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379

      # Server
      PORT: 8080
      GIN_MODE: debug

      # Google Cloud Storage (optional in dev)
      GCP_PROJECT_ID: ${GCP_PROJECT_ID:-}
      GCS_BUCKET: ${GCS_BUCKET:-uploadparty-beats}
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS:-/app/secrets/gcp-service-account.json}

      # External license directory (generic)
      LICENSES_PROVIDER: ${LICENSES_PROVIDER:-none}
      LICENSES_TOKEN: ${LICENSES_TOKEN:-}
      LICENSES_DSN: ${LICENSES_DSN:-}

      # Security
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
      postgres-local:
        condition: service_started
    networks:
      - uploadparty-network
    volumes:
      - ./uploads:/app/uploads
      - ./secrets:/app/secrets:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

volumes:
  pg_data:

networks:
  uploadparty-network:
    driver: bridge
